// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: code.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const findCodeAndIncrementCount = `-- name: FindCodeAndIncrementCount :one
UPDATE invite_codes
SET count = COALESCE(count, 0) + 1
WHERE code = $1
RETURNING id, code, is_used, count
`

type FindCodeAndIncrementCountRow struct {
	ID     uuid.UUID     `json:"id"`
	Code   string        `json:"code"`
	IsUsed sql.NullBool  `json:"is_used"`
	Count  sql.NullInt32 `json:"count"`
}

// 验证邀请码并自动增加使用次数计数, 这里就算没注册也应该算使用了
// 如果 code 存在，就增加 count，无论 is_used 是什么
func (q *Queries) FindCodeAndIncrementCount(ctx context.Context, code string) (FindCodeAndIncrementCountRow, error) {
	row := q.db.QueryRowContext(ctx, findCodeAndIncrementCount, code)
	var i FindCodeAndIncrementCountRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.IsUsed,
		&i.Count,
	)
	return i, err
}

const getABTestConfigByInviteCodeID = `-- name: GetABTestConfigByInviteCodeID :one
SELECT has_recommend, has_more_information 
FROM invite_codes 
WHERE id = $1
`

type GetABTestConfigByInviteCodeIDRow struct {
	HasRecommend       sql.NullBool `json:"has_recommend"`
	HasMoreInformation sql.NullBool `json:"has_more_information"`
}

// 根据邀请码ID获取A/B测试配置，但是这里也许该再解耦一下，毕竟 has_more infomation 应该是只需要查询一次的，没必要一直查询
func (q *Queries) GetABTestConfigByInviteCodeID(ctx context.Context, id uuid.UUID) (GetABTestConfigByInviteCodeIDRow, error) {
	row := q.db.QueryRowContext(ctx, getABTestConfigByInviteCodeID, id)
	var i GetABTestConfigByInviteCodeIDRow
	err := row.Scan(&i.HasRecommend, &i.HasMoreInformation)
	return i, err
}

const getIdAndEmailByCodeID = `-- name: GetIdAndEmailByCodeID :one
SELECT id,email FROM invite_codes WHERE id = $1
`

type GetIdAndEmailByCodeIDRow struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

// 获取邀请码ID 和 email（注册时使用）
func (q *Queries) GetIdAndEmailByCodeID(ctx context.Context, id uuid.UUID) (GetIdAndEmailByCodeIDRow, error) {
	row := q.db.QueryRowContext(ctx, getIdAndEmailByCodeID, id)
	var i GetIdAndEmailByCodeIDRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const markInviteCodeAsUsed = `-- name: MarkInviteCodeAsUsed :exec
UPDATE invite_codes 
SET is_used = TRUE 
WHERE code = $1
`

// 只查询邀请码信息（不增加计数，用于纯查询场景）
func (q *Queries) MarkInviteCodeAsUsed(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, markInviteCodeAsUsed, code)
	return err
}
