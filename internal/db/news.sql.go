// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: news.sql

package db

import (
	"context"
	"database/sql"
)

const getArticleByID = `-- name: GetArticleByID :one
SELECT feed_id, title, description, content, link, guid, author, published_at 
FROM feed_items 
WHERE id = $1
`

type GetArticleByIDRow struct {
	FeedID      sql.NullInt32  `json:"feed_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Content     sql.NullString `json:"content"`
	Link        string         `json:"link"`
	Guid        string         `json:"guid"`
	Author      sql.NullString `json:"author"`
	PublishedAt sql.NullTime   `json:"published_at"`
}

// 获取文章的详细信息， 这里需要根据文章的id来获取
func (q *Queries) GetArticleByID(ctx context.Context, id int32) (GetArticleByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getArticleByID, id)
	var i GetArticleByIDRow
	err := row.Scan(
		&i.FeedID,
		&i.Title,
		&i.Description,
		&i.Content,
		&i.Link,
		&i.Guid,
		&i.Author,
		&i.PublishedAt,
	)
	return i, err
}

const getNewArticles = `-- name: GetNewArticles :many
SELECT id, feed_id, title, description, content, link, guid, author, published_at, created_at FROM feed_items
WHERE published_at > $1  -- 这里每天根据推荐时间选取
ORDER BY published_at DESC
LIMIT $2
`

type GetNewArticlesParams struct {
	PublishedAt sql.NullTime `json:"published_at"`
	Limit       int32        `json:"limit"`
}

// 获取新的文章， 这里需要根据推荐算法，所以这里筛选出来的接口还应该需要接到推荐算法上
func (q *Queries) GetNewArticles(ctx context.Context, arg GetNewArticlesParams) ([]FeedItem, error) {
	rows, err := q.db.QueryContext(ctx, getNewArticles, arg.PublishedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedItem
	for rows.Next() {
		var i FeedItem
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Description,
			&i.Content,
			&i.Link,
			&i.Guid,
			&i.Author,
			&i.PublishedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
