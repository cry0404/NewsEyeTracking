// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, gender, age, date_of_birth, education_level, residence,
    weekly_reading_hours, primary_news_platform, is_active_searcher,
    is_colorblind, vision_status, is_vision_corrected, invite_code_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, email, gender, age, date_of_birth, education_level, residence, weekly_reading_hours, primary_news_platform, is_active_searcher, is_colorblind, vision_status, is_vision_corrected, invite_code_id, created_at
`

type CreateUserParams struct {
	Email               string         `json:"email"`
	Gender              sql.NullString `json:"gender"`
	Age                 sql.NullInt32  `json:"age"`
	DateOfBirth         sql.NullTime   `json:"date_of_birth"`
	EducationLevel      sql.NullString `json:"education_level"`
	Residence           sql.NullString `json:"residence"`
	WeeklyReadingHours  sql.NullInt32  `json:"weekly_reading_hours"`
	PrimaryNewsPlatform sql.NullString `json:"primary_news_platform"`
	IsActiveSearcher    sql.NullBool   `json:"is_active_searcher"`
	IsColorblind        sql.NullBool   `json:"is_colorblind"`
	VisionStatus        sql.NullString `json:"vision_status"`
	IsVisionCorrected   sql.NullBool   `json:"is_vision_corrected"`
	InviteCodeID        int32          `json:"invite_code_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Gender,
		arg.Age,
		arg.DateOfBirth,
		arg.EducationLevel,
		arg.Residence,
		arg.WeeklyReadingHours,
		arg.PrimaryNewsPlatform,
		arg.IsActiveSearcher,
		arg.IsColorblind,
		arg.VisionStatus,
		arg.IsVisionCorrected,
		arg.InviteCodeID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Gender,
		&i.Age,
		&i.DateOfBirth,
		&i.EducationLevel,
		&i.Residence,
		&i.WeeklyReadingHours,
		&i.PrimaryNewsPlatform,
		&i.IsActiveSearcher,
		&i.IsColorblind,
		&i.VisionStatus,
		&i.IsVisionCorrected,
		&i.InviteCodeID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserABtestInformation = `-- name: GetUserABtestInformation :one
SELECT has_recommend, has_more_information 
FROM invite_codes WHERE id = $1
`

type GetUserABtestInformationRow struct {
	HasRecommend       sql.NullBool `json:"has_recommend"`
	HasMoreInformation sql.NullBool `json:"has_more_information"`
}

// 根据邀请码关联用户来查询对应的 recommend 和 information 状态
func (q *Queries) GetUserABtestInformation(ctx context.Context, id int32) (GetUserABtestInformationRow, error) {
	row := q.db.QueryRowContext(ctx, getUserABtestInformation, id)
	var i GetUserABtestInformationRow
	err := row.Scan(&i.HasRecommend, &i.HasMoreInformation)
	return i, err
}

const updateUser = `-- name: UpdateUser :one

UPDATE users SET
    gender = $2, age = $3, date_of_birth = $4, education_level = $5, residence = $6,
    weekly_reading_hours = $7, primary_news_platform = $8, is_active_searcher = $9,
    is_colorblind = $10, vision_status = $11, is_vision_corrected = $12, invite_code_id = $13
WHERE id = $1 RETURNING id, email, gender, age, date_of_birth, education_level, residence, weekly_reading_hours, primary_news_platform, is_active_searcher, is_colorblind, vision_status, is_vision_corrected, invite_code_id, created_at
`

type UpdateUserParams struct {
	ID                  int32          `json:"id"`
	Gender              sql.NullString `json:"gender"`
	Age                 sql.NullInt32  `json:"age"`
	DateOfBirth         sql.NullTime   `json:"date_of_birth"`
	EducationLevel      sql.NullString `json:"education_level"`
	Residence           sql.NullString `json:"residence"`
	WeeklyReadingHours  sql.NullInt32  `json:"weekly_reading_hours"`
	PrimaryNewsPlatform sql.NullString `json:"primary_news_platform"`
	IsActiveSearcher    sql.NullBool   `json:"is_active_searcher"`
	IsColorblind        sql.NullBool   `json:"is_colorblind"`
	VisionStatus        sql.NullString `json:"vision_status"`
	IsVisionCorrected   sql.NullBool   `json:"is_vision_corrected"`
	InviteCodeID        int32          `json:"invite_code_id"`
}

// 这里对应的应该是注册时的
// 通过传入的第一个参数来更新返回对应的 user 信息
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Gender,
		arg.Age,
		arg.DateOfBirth,
		arg.EducationLevel,
		arg.Residence,
		arg.WeeklyReadingHours,
		arg.PrimaryNewsPlatform,
		arg.IsActiveSearcher,
		arg.IsColorblind,
		arg.VisionStatus,
		arg.IsVisionCorrected,
		arg.InviteCodeID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Gender,
		&i.Age,
		&i.DateOfBirth,
		&i.EducationLevel,
		&i.Residence,
		&i.WeeklyReadingHours,
		&i.PrimaryNewsPlatform,
		&i.IsActiveSearcher,
		&i.IsColorblind,
		&i.VisionStatus,
		&i.IsVisionCorrected,
		&i.InviteCodeID,
		&i.CreatedAt,
	)
	return i, err
}
