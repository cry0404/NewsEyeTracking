// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createSession = `-- name: CreateSession :one

INSERT INTO reading_sessions (
    article_id, start_time, device_info, user_id
)VALUES(
    $1, $2, $3, $4
) RETURNING id, user_id, article_id, start_time, end_time, device_info, oss_file_path, data_size, event_count, session_duration_ms
`

type CreateSessionParams struct {
	ArticleID  int32                 `json:"article_id"`
	StartTime  sql.NullTime          `json:"start_time"`
	DeviceInfo pqtype.NullRawMessage `json:"device_info"`
	UserID     int32                 `json:"user_id"`
}

// 创建一个新的会话，相当于打开了一篇新的网页，开启了新的事件
// 初始的 endtime 应该是为空的, oss 存储路径应该暂定, 这里的 starttime 应该是有的
// 但是 endtime 应该是待定的，由前端发回来的信息， sessionid 作为打包区分，
// 一个 user_id 的内容
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (ReadingSession, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ArticleID,
		arg.StartTime,
		arg.DeviceInfo,
		arg.UserID,
	)
	var i ReadingSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ArticleID,
		&i.StartTime,
		&i.EndTime,
		&i.DeviceInfo,
		&i.OssFilePath,
		&i.DataSize,
		&i.EventCount,
		&i.SessionDurationMs,
	)
	return i, err
}

const updateSessionEndTime = `-- name: UpdateSessionEndTime :one
UPDATE reading_sessions SET
    end_time = $2
WHERE id = $1 RETURNING id, user_id, article_id, start_time, end_time, device_info, oss_file_path, data_size, event_count, session_duration_ms
`

type UpdateSessionEndTimeParams struct {
	ID      uuid.UUID    `json:"id"`
	EndTime sql.NullTime `json:"end_time"`
}

// 更新会话的结束时间， 这里应该根据 sessionid 来更新,前端发送过来
func (q *Queries) UpdateSessionEndTime(ctx context.Context, arg UpdateSessionEndTimeParams) (ReadingSession, error) {
	row := q.db.QueryRowContext(ctx, updateSessionEndTime, arg.ID, arg.EndTime)
	var i ReadingSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ArticleID,
		&i.StartTime,
		&i.EndTime,
		&i.DeviceInfo,
		&i.OssFilePath,
		&i.DataSize,
		&i.EventCount,
		&i.SessionDurationMs,
	)
	return i, err
}
