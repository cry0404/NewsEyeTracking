// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createSession = `-- name: CreateSession :one

INSERT INTO reading_sessions (
    id, article_id, start_time, device_info, user_id
)VALUES(
    uuid_generate_v4(), $1, $2, $3, $4
) RETURNING id, user_id, article_id, start_time, end_time, device_info, session_duration_ms, user_session_id
`

type CreateSessionParams struct {
	ArticleID  int32                 `json:"article_id"`
	StartTime  sql.NullTime          `json:"start_time"`
	DeviceInfo pqtype.NullRawMessage `json:"device_info"`
	UserID     uuid.UUID             `json:"user_id"`
}

// 创建一个新的会话，相当于打开了一篇新的网页，开启了新的事件
// 初始的 endtime 应该是为空的, oss 存储路径应该暂定, 这里的 starttime 应该是有的
// 但是 endtime 应该是待定的，由前端发回来的信息， sessionid 作为打包区分，
// 一个 user_id 的内容
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (ReadingSession, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ArticleID,
		arg.StartTime,
		arg.DeviceInfo,
		arg.UserID,
	)
	var i ReadingSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ArticleID,
		&i.StartTime,
		&i.EndTime,
		&i.DeviceInfo,
		&i.SessionDurationMs,
		&i.UserSessionID,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, article_id, start_time, end_time, device_info, session_duration_ms, user_session_id FROM reading_sessions WHERE id = $1
`

// 会话查询
func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (ReadingSession, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i ReadingSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ArticleID,
		&i.StartTime,
		&i.EndTime,
		&i.DeviceInfo,
		&i.SessionDurationMs,
		&i.UserSessionID,
	)
	return i, err
}

const getUserActiveSessions = `-- name: GetUserActiveSessions :many
SELECT id, user_id, article_id, start_time, end_time, device_info, session_duration_ms, user_session_id FROM reading_sessions WHERE user_id = $1 AND end_time IS NULL
`

func (q *Queries) GetUserActiveSessions(ctx context.Context, userID uuid.UUID) ([]ReadingSession, error) {
	rows, err := q.db.QueryContext(ctx, getUserActiveSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadingSession
	for rows.Next() {
		var i ReadingSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ArticleID,
			&i.StartTime,
			&i.EndTime,
			&i.DeviceInfo,
			&i.SessionDurationMs,
			&i.UserSessionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSessionStats = `-- name: GetUserSessionStats :many
SELECT 
    article_id,
    COUNT(*) as session_count,
    AVG(session_duration_ms) as avg_duration_ms,
    SUM(event_count) as total_events
FROM reading_sessions 
WHERE user_id = $1 AND end_time IS NOT NULL
GROUP BY article_id
`

type GetUserSessionStatsRow struct {
	ArticleID     int32   `json:"article_id"`
	SessionCount  int64   `json:"session_count"`
	AvgDurationMs float64 `json:"avg_duration_ms"`
	TotalEvents   int64   `json:"total_events"`
}

// 会话统计查询
func (q *Queries) GetUserSessionStats(ctx context.Context, userID uuid.UUID) ([]GetUserSessionStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserSessionStats, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserSessionStatsRow
	for rows.Next() {
		var i GetUserSessionStatsRow
		if err := rows.Scan(
			&i.ArticleID,
			&i.SessionCount,
			&i.AvgDurationMs,
			&i.TotalEvents,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionEndTime = `-- name: UpdateSessionEndTime :one
UPDATE reading_sessions SET
    end_time = $2,
    session_duration_ms = EXTRACT(EPOCH FROM ($2 - start_time)) * 1000
WHERE id = $1 RETURNING id, user_id, article_id, start_time, end_time, device_info, session_duration_ms, user_session_id
`

type UpdateSessionEndTimeParams struct {
	ID      uuid.UUID    `json:"id"`
	EndTime sql.NullTime `json:"end_time"`
}

// 会话更新操作
func (q *Queries) UpdateSessionEndTime(ctx context.Context, arg UpdateSessionEndTimeParams) (ReadingSession, error) {
	row := q.db.QueryRowContext(ctx, updateSessionEndTime, arg.ID, arg.EndTime)
	var i ReadingSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ArticleID,
		&i.StartTime,
		&i.EndTime,
		&i.DeviceInfo,
		&i.SessionDurationMs,
		&i.UserSessionID,
	)
	return i, err
}
